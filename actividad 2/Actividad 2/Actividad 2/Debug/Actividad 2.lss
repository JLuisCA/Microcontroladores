
Actividad 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800100  00000470  000004e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000470  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000152a  00000000  00000000  000006e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000982  00000000  00000000  00001c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008fa  00000000  00000000  00002590  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e0  00000000  00000000  00002e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000509  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ad  00000000  00000000  00003575  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003f22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 39       	cpi	r26, 0x9E	; 158
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  8e:	0c 94 36 02 	jmp	0x46c	; 0x46c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Enable TWI
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //START condition
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <start+0x6>
}
  b6:	08 95       	ret

000000b8 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //STOP condition
  b8:	84 e9       	ldi	r24, 0x94	; 148
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <stop+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <stop+0x10>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte to write
  cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //writing with acknowledge (TWEA=1)
  d0:	84 ec       	ldi	r24, 0xC4	; 196
  d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <write_i2c+0xa>
}
  de:	08 95       	ret

000000e0 <lcd_i2c_reset>:
	if(value<0) lcd_i2c_data('-');
	for(i=j;i<5;i++)
		{
			lcd_i2c_data(48+str[i]);
		}
}
  e0:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
  e4:	8e e4       	ldi	r24, 0x4E	; 78
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	93 e1       	ldi	r25, 0x13	; 19
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_i2c_reset+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_i2c_reset+0x1a>
  fa:	00 00       	nop
  fc:	84 e3       	ldi	r24, 0x34	; 52
  fe:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 108:	83 ec       	ldi	r24, 0xC3	; 195
 10a:	99 e0       	ldi	r25, 0x09	; 9
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_i2c_reset+0x2c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_i2c_reset+0x32>
 112:	00 00       	nop
 114:	84 e3       	ldi	r24, 0x34	; 52
 116:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 11a:	80 e3       	ldi	r24, 0x30	; 48
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_i2c_reset+0x44>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_i2c_reset+0x4a>
 12a:	00 00       	nop
 12c:	84 e3       	ldi	r24, 0x34	; 52
 12e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_i2c_reset+0x5c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_i2c_reset+0x62>
 142:	00 00       	nop
 144:	84 e2       	ldi	r24, 0x24	; 36
 146:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 150:	89 ef       	ldi	r24, 0xF9	; 249
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_i2c_reset+0x74>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_i2c_reset+0x7a>
 15a:	00 00       	nop
 15c:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 160:	08 95       	ret

00000162 <lcd_i2c_cmd>:
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	c8 2f       	mov	r28, r24
 168:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 16c:	8e e4       	ldi	r24, 0x4E	; 78
 16e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 172:	dc 2f       	mov	r29, r28
 174:	d0 7f       	andi	r29, 0xF0	; 240
 176:	8d 2f       	mov	r24, r29
 178:	8c 60       	ori	r24, 0x0C	; 12
 17a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 17e:	8d 2f       	mov	r24, r29
 180:	88 60       	ori	r24, 0x08	; 8
 182:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	c8 9f       	mul	r28, r24
 18a:	e0 01       	movw	r28, r0
 18c:	11 24       	eor	r1, r1
 18e:	8c 2f       	mov	r24, r28
 190:	8c 60       	ori	r24, 0x0C	; 12
 192:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 19c:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 1a0:	83 ef       	ldi	r24, 0xF3	; 243
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_i2c_cmd+0x42>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_i2c_cmd+0x48>
 1aa:	00 00       	nop
 1ac:	83 ef       	ldi	r24, 0xF3	; 243
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_i2c_cmd+0x4e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_i2c_cmd+0x54>
 1b6:	00 00       	nop
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <lcd_i2c_init>:
 1be:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_i2c_reset>
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1de:	08 95       	ret

000001e0 <lcd_i2c_data>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	c8 2f       	mov	r28, r24
 1e6:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 1ea:	8e e4       	ldi	r24, 0x4E	; 78
 1ec:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1f0:	dc 2f       	mov	r29, r28
 1f2:	d0 7f       	andi	r29, 0xF0	; 240
 1f4:	8d 2f       	mov	r24, r29
 1f6:	8d 60       	ori	r24, 0x0D	; 13
 1f8:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1fc:	8d 2f       	mov	r24, r29
 1fe:	89 60       	ori	r24, 0x09	; 9
 200:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 204:	20 e1       	ldi	r18, 0x10	; 16
 206:	c2 9f       	mul	r28, r18
 208:	e0 01       	movw	r28, r0
 20a:	11 24       	eor	r1, r1
 20c:	8c 2f       	mov	r24, r28
 20e:	8d 60       	ori	r24, 0x0D	; 13
 210:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 214:	8c 2f       	mov	r24, r28
 216:	89 60       	ori	r24, 0x09	; 9
 218:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 21c:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 220:	8f ed       	ldi	r24, 0xDF	; 223
 222:	93 e9       	ldi	r25, 0x93	; 147
 224:	24 e0       	ldi	r18, 0x04	; 4
 226:	81 50       	subi	r24, 0x01	; 1
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <lcd_i2c_data+0x46>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_i2c_data+0x50>
 230:	00 00       	nop
 232:	8f ed       	ldi	r24, 0xDF	; 223
 234:	93 e9       	ldi	r25, 0x93	; 147
 236:	24 e0       	ldi	r18, 0x04	; 4
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	20 40       	sbci	r18, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <lcd_i2c_data+0x58>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_i2c_data+0x62>
 242:	00 00       	nop
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <lcd_i2c_col_row>:
 24a:	e6 2f       	mov	r30, r22
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	e1 50       	subi	r30, 0x01	; 1
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	90 81       	ld	r25, Z
 254:	89 0f       	add	r24, r25
 256:	81 58       	subi	r24, 0x81	; 129
 258:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 25c:	08 95       	ret

0000025e <lcd_i2c_clr>:
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 264:	83 ef       	ldi	r24, 0xF3	; 243
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_i2c_clr+0xa>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_i2c_clr+0x10>
 26e:	00 00       	nop
 270:	08 95       	ret

00000272 <lcd_i2c_write_string>:
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	8c 01       	movw	r16, r24
 27c:	c0 e0       	ldi	r28, 0x00	; 0
 27e:	d0 e0       	ldi	r29, 0x00	; 0
 280:	03 c0       	rjmp	.+6      	; 0x288 <lcd_i2c_write_string+0x16>
 282:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_i2c_data>
 286:	21 96       	adiw	r28, 0x01	; 1
 288:	f8 01       	movw	r30, r16
 28a:	ec 0f       	add	r30, r28
 28c:	fd 1f       	adc	r31, r29
 28e:	80 81       	ld	r24, Z
 290:	81 11       	cpse	r24, r1
 292:	f7 cf       	rjmp	.-18     	; 0x282 <lcd_i2c_write_string+0x10>
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	1f 91       	pop	r17
 29a:	0f 91       	pop	r16
 29c:	08 95       	ret

0000029e <LCD_Command>:
void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port= cmnd;
 29e:	85 b9       	out	0x05, r24	; 5
	LCD_Command_Port &=~(1<<RS);
 2a0:	88 b1       	in	r24, 0x08	; 8
 2a2:	8e 7f       	andi	r24, 0xFE	; 254
 2a4:	88 b9       	out	0x08, r24	; 8
	LCD_Command_Port &=~(1<<RW);
 2a6:	88 b1       	in	r24, 0x08	; 8
 2a8:	8d 7f       	andi	r24, 0xFD	; 253
 2aa:	88 b9       	out	0x08, r24	; 8
	LCD_Command_Port |= (1<<EN);
 2ac:	88 b1       	in	r24, 0x08	; 8
 2ae:	84 60       	ori	r24, 0x04	; 4
 2b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &=~(1<<EN);
 2b4:	88 b1       	in	r24, 0x08	; 8
 2b6:	8b 7f       	andi	r24, 0xFB	; 251
 2b8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	83 ef       	ldi	r24, 0xF3	; 243
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	01 97       	sbiw	r24, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <LCD_Command+0x20>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <LCD_Command+0x26>
 2c4:	00 00       	nop
 2c6:	08 95       	ret

000002c8 <lcd_char>:
	_delay_ms(2);
	
}
void lcd_char(unsigned char char_data)
{
	LCD_Data_Port=char_data;
 2c8:	85 b9       	out	0x05, r24	; 5
	LCD_Command_Port |=(1<<RS);
 2ca:	88 b1       	in	r24, 0x08	; 8
 2cc:	81 60       	ori	r24, 0x01	; 1
 2ce:	88 b9       	out	0x08, r24	; 8
	LCD_Command_Port &= ~(1<<RW);
 2d0:	88 b1       	in	r24, 0x08	; 8
 2d2:	8d 7f       	andi	r24, 0xFD	; 253
 2d4:	88 b9       	out	0x08, r24	; 8
	LCD_Command_Port |= (1<<EN);
 2d6:	88 b1       	in	r24, 0x08	; 8
 2d8:	84 60       	ori	r24, 0x04	; 4
 2da:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 2de:	88 b1       	in	r24, 0x08	; 8
 2e0:	8b 7f       	andi	r24, 0xFB	; 251
 2e2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e4:	83 ef       	ldi	r24, 0xF3	; 243
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_char+0x20>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <lcd_char+0x26>
 2ee:	00 00       	nop
 2f0:	08 95       	ret

000002f2 <LCD_custom_char>:
	_delay_ms(2);
}
void LCD_custom_char(unsigned char loc,unsigned char *msg)
{
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
	unsigned char i;
	if(loc<8)
 2f8:	88 30       	cpi	r24, 0x08	; 8
 2fa:	98 f4       	brcc	.+38     	; 0x322 <LCD_custom_char+0x30>
 2fc:	8b 01       	movw	r16, r22
	{
		LCD_Command (0X40 + (loc*8));
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	08 96       	adiw	r24, 0x08	; 8
 302:	88 0f       	add	r24, r24
 304:	88 0f       	add	r24, r24
 306:	88 0f       	add	r24, r24
 308:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_Command>
		for (i=0;i<8;i++)
 30c:	c0 e0       	ldi	r28, 0x00	; 0
 30e:	07 c0       	rjmp	.+14     	; 0x31e <LCD_custom_char+0x2c>
		lcd_char(msg[i]);
 310:	f8 01       	movw	r30, r16
 312:	ec 0f       	add	r30, r28
 314:	f1 1d       	adc	r31, r1
 316:	80 81       	ld	r24, Z
 318:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_char>
{
	unsigned char i;
	if(loc<8)
	{
		LCD_Command (0X40 + (loc*8));
		for (i=0;i<8;i++)
 31c:	cf 5f       	subi	r28, 0xFF	; 255
 31e:	c8 30       	cpi	r28, 0x08	; 8
 320:	b8 f3       	brcs	.-18     	; 0x310 <LCD_custom_char+0x1e>
		lcd_char(msg[i]);
	}
	
}
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	08 95       	ret

0000032a <main>:
#include "leds.h"
#include "i2c.h"
#include "lcd_i2c.h"

int main(void)
{
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	a0 97       	sbiw	r28, 0x20	; 32
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	init_ports();
 33e:	0e 94 30 02 	call	0x460	; 0x460 <init_ports>
	init_i2c();
 342:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
	lcd_i2c_init();
 346:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_i2c_init>
	lcd_i2c_clr();
 34a:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_i2c_clr>
	lcd_i2c_col_row(1,1);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_col_row>
	lcd_i2c_write_string(" Hoy monita se de");
 356:	82 e2       	ldi	r24, 0x22	; 34
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 39 01 	call	0x272	; 0x272 <lcd_i2c_write_string>
	lcd_i2c_col_row(1,2);
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_col_row>
	lcd_i2c_write_string("sperto contenta ");
 366:	84 e3       	ldi	r24, 0x34	; 52
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	0e 94 39 01 	call	0x272	; 0x272 <lcd_i2c_write_string>
	lcd_i2c_cmd(0x17); 
 36e:	87 e1       	ldi	r24, 0x17	; 23
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
	lcd_i2c_col_row(1,1);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_col_row>
	lcd_i2c_write_string("lo cual disfruta");
 37e:	85 e4       	ldi	r24, 0x45	; 69
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	0e 94 39 01 	call	0x272	; 0x272 <lcd_i2c_write_string>
	lcd_i2c_col_row(1,2);
 386:	62 e0       	ldi	r22, 0x02	; 2
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_col_row>
	lcd_i2c_write_string("de pan con agua");
 38e:	86 e5       	ldi	r24, 0x56	; 86
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	0e 94 39 01 	call	0x272	; 0x272 <lcd_i2c_write_string>
	lcd_i2c_col_row(1,1);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_col_row>
	lcd_i2c_write_string("sin embargo ell");
 39e:	86 e6       	ldi	r24, 0x66	; 102
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	0e 94 39 01 	call	0x272	; 0x272 <lcd_i2c_write_string>
	lcd_i2c_col_row(1,2);
 3a6:	62 e0       	ldi	r22, 0x02	; 2
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_col_row>
	lcd_i2c_write_string("a salto enojada");
 3ae:	86 e7       	ldi	r24, 0x76	; 118
 3b0:	91 e0       	ldi	r25, 0x01	; 1
 3b2:	0e 94 39 01 	call	0x272	; 0x272 <lcd_i2c_write_string>
	lcd_i2c_clr();
 3b6:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_i2c_clr>
	lcd_i2c_write_string(" CARGANDO...");
 3ba:	86 e8       	ldi	r24, 0x86	; 134
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 39 01 	call	0x272	; 0x272 <lcd_i2c_write_string>
		char i;
		
		unsigned char Character1[8] = {0x0D,0x0D,0x05,0x1F,0x1A,0x1E,0x0A,0x11};  /* Custom char set for alphanumeric LCD Module */
 3c2:	88 e0       	ldi	r24, 0x08	; 8
 3c4:	e2 e0       	ldi	r30, 0x02	; 2
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	de 01       	movw	r26, r28
 3ca:	11 96       	adiw	r26, 0x01	; 1
 3cc:	01 90       	ld	r0, Z+
 3ce:	0d 92       	st	X+, r0
 3d0:	8a 95       	dec	r24
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0xa2>
		unsigned char Character2[8] = {0x0E,0x0E,0x04,0x1F,0x15,0x15,0x0A,0x11};
 3d4:	88 e0       	ldi	r24, 0x08	; 8
 3d6:	ea e0       	ldi	r30, 0x0A	; 10
 3d8:	f1 e0       	ldi	r31, 0x01	; 1
 3da:	de 01       	movw	r26, r28
 3dc:	19 96       	adiw	r26, 0x09	; 9
 3de:	01 90       	ld	r0, Z+
 3e0:	0d 92       	st	X+, r0
 3e2:	8a 95       	dec	r24
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0xb4>
		unsigned char Character3[8] = { 0x06,0x16,0x14,0x1F,0x05,0x05,0x0A,0x11 };
 3e6:	88 e0       	ldi	r24, 0x08	; 8
 3e8:	e2 e1       	ldi	r30, 0x12	; 18
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	de 01       	movw	r26, r28
 3ee:	51 96       	adiw	r26, 0x11	; 17
 3f0:	01 90       	ld	r0, Z+
 3f2:	0d 92       	st	X+, r0
 3f4:	8a 95       	dec	r24
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0xc6>
		unsigned char Character4[8] = {  0x0E,0x0E,0x04,0x1F,0x15,0x04,0x0A,0x11 };
 3f8:	88 e0       	ldi	r24, 0x08	; 8
 3fa:	ea e1       	ldi	r30, 0x1A	; 26
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	de 01       	movw	r26, r28
 400:	59 96       	adiw	r26, 0x19	; 25
 402:	01 90       	ld	r0, Z+
 404:	0d 92       	st	X+, r0
 406:	8a 95       	dec	r24
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>

		lcd_i2c_init();
 40a:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_i2c_init>
		
		
		LCD_custom_char(0, Character1);  /* Build Character1 at position 0 */
 40e:	be 01       	movw	r22, r28
 410:	6f 5f       	subi	r22, 0xFF	; 255
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_custom_char>
		LCD_custom_char(1, Character2);  /* Build Character2 at position 1 */
 41a:	be 01       	movw	r22, r28
 41c:	67 5f       	subi	r22, 0xF7	; 247
 41e:	7f 4f       	sbci	r23, 0xFF	; 255
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_custom_char>
		LCD_custom_char(2, Character3);  /* Build Character3 at position 2 */
 426:	be 01       	movw	r22, r28
 428:	6f 5e       	subi	r22, 0xEF	; 239
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_custom_char>
		LCD_custom_char(3, Character4);  /* Build Character4 at position 3 */
 432:	be 01       	movw	r22, r28
 434:	67 5e       	subi	r22, 0xE7	; 231
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	0e 94 79 01 	call	0x2f2	; 0x2f2 <LCD_custom_char>

		LCD_Command(0x80);		/*cursor at home position */
 43e:	80 e8       	ldi	r24, 0x80	; 128
 440:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_Command>
		lcd_i2c_write_string("LOADING...");
 444:	83 e9       	ldi	r24, 0x93	; 147
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	0e 94 39 01 	call	0x272	; 0x272 <lcd_i2c_write_string>
		LCD_Command(0xc0);
 44c:	80 ec       	ldi	r24, 0xC0	; 192
 44e:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_Command>
		
		for(i=0;i<8;i++)		/* function will send data 1 to 8 to lcd */
		{
			lcd_char(i);		/* char at 'i'th position will display on lcd */
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_char>
			lcd_char(' ');		/* space between each custom char. */
 458:	80 e2       	ldi	r24, 0x20	; 32
 45a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lcd_char>
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>

00000460 <init_ports>:
PB3	|	D4
PB4	|	D5
PD2	|	D6
PD3	|	D7
*/	
	DDRB = 0xFF;
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD2) | (1 << PD3);
 464:	8a b1       	in	r24, 0x0a	; 10
 466:	8c 60       	ori	r24, 0x0C	; 12
 468:	8a b9       	out	0x0a, r24	; 10
 46a:	08 95       	ret

0000046c <_exit>:
 46c:	f8 94       	cli

0000046e <__stop_program>:
 46e:	ff cf       	rjmp	.-2      	; 0x46e <__stop_program>
