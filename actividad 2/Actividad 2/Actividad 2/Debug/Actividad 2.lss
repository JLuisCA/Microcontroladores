
Actividad 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00000454  000004c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000454  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013de  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000093c  00000000  00000000  00001a36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000081f  00000000  00000000  00002372  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00002b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051d  00000000  00000000  00002d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009cd  00000000  00000000  0000326d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003c3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 81 01 	call	0x302	; 0x302 <main>
  8e:	0c 94 28 02 	jmp	0x450	; 0x450 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <init_i2c>:
#include <util/delay.h>
#include "i2c.h"

void init_i2c(void)
{
	TWSR = ((0 << TWPS1) & (0 << TWPS0)); //Prescaler = 1
  96:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 0X14; //Define Bit rate SCL_frec=CPU_frec/(16+2(TWBR)x4^(prescaler))
  9a:	84 e1       	ldi	r24, 0x14	; 20
  9c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
				//SCL_Frec=(16000000/(16+2(20)(4)))=74Khz
	TWCR = (1<<TWEN); //Enable TWI
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	08 95       	ret

000000a8 <start>:
}

void start(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //START condition
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  ae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	88 23       	and	r24, r24
  b4:	e4 f7       	brge	.-8      	; 0xae <start+0x6>
}
  b6:	08 95       	ret

000000b8 <stop>:

void stop(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); //STOP condition
  b8:	84 e9       	ldi	r24, 0x94	; 148
  ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	89 ef       	ldi	r24, 0xF9	; 249
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <stop+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <stop+0x10>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <write_i2c>:
	_delay_ms(1);
}

void write_i2c(uint8_t data)
{
	TWDR = data; //Byte to write
  cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //writing with acknowledge (TWEA=1)
  d0:	84 ec       	ldi	r24, 0xC4	; 196
  d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR & (1<<TWINT))==0); //wait until TWINT=0 (TWI then finish)
  d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  da:	88 23       	and	r24, r24
  dc:	e4 f7       	brge	.-8      	; 0xd6 <write_i2c+0xa>
}
  de:	08 95       	ret

000000e0 <lcd_i2c_reset>:
	if(value<0) lcd_i2c_data('-');
	for(i=j;i<5;i++)
		{
			lcd_i2c_data(48+str[i]);
		}
}
  e0:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
  e4:	8e e4       	ldi	r24, 0x4E	; 78
  e6:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	93 e1       	ldi	r25, 0x13	; 19
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_i2c_reset+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_i2c_reset+0x1a>
  fa:	00 00       	nop
  fc:	84 e3       	ldi	r24, 0x34	; 52
  fe:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 102:	80 e3       	ldi	r24, 0x30	; 48
 104:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 108:	83 ec       	ldi	r24, 0xC3	; 195
 10a:	99 e0       	ldi	r25, 0x09	; 9
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_i2c_reset+0x2c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <lcd_i2c_reset+0x32>
 112:	00 00       	nop
 114:	84 e3       	ldi	r24, 0x34	; 52
 116:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 11a:	80 e3       	ldi	r24, 0x30	; 48
 11c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_i2c_reset+0x44>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_i2c_reset+0x4a>
 12a:	00 00       	nop
 12c:	84 e3       	ldi	r24, 0x34	; 52
 12e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 138:	89 ef       	ldi	r24, 0xF9	; 249
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_i2c_reset+0x5c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <lcd_i2c_reset+0x62>
 142:	00 00       	nop
 144:	84 e2       	ldi	r24, 0x24	; 36
 146:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 150:	89 ef       	ldi	r24, 0xF9	; 249
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <lcd_i2c_reset+0x74>
 158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_i2c_reset+0x7a>
 15a:	00 00       	nop
 15c:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 160:	08 95       	ret

00000162 <lcd_i2c_cmd>:
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	c8 2f       	mov	r28, r24
 168:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 16c:	8e e4       	ldi	r24, 0x4E	; 78
 16e:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 172:	dc 2f       	mov	r29, r28
 174:	d0 7f       	andi	r29, 0xF0	; 240
 176:	8d 2f       	mov	r24, r29
 178:	8c 60       	ori	r24, 0x0C	; 12
 17a:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 17e:	8d 2f       	mov	r24, r29
 180:	88 60       	ori	r24, 0x08	; 8
 182:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 186:	80 e1       	ldi	r24, 0x10	; 16
 188:	c8 9f       	mul	r28, r24
 18a:	e0 01       	movw	r28, r0
 18c:	11 24       	eor	r1, r1
 18e:	8c 2f       	mov	r24, r28
 190:	8c 60       	ori	r24, 0x0C	; 12
 192:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 196:	8c 2f       	mov	r24, r28
 198:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 19c:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 1a0:	83 ef       	ldi	r24, 0xF3	; 243
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_i2c_cmd+0x42>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_i2c_cmd+0x48>
 1aa:	00 00       	nop
 1ac:	83 ef       	ldi	r24, 0xF3	; 243
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_i2c_cmd+0x4e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <lcd_i2c_cmd+0x54>
 1b6:	00 00       	nop
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <lcd_i2c_init>:
 1be:	0e 94 4b 00 	call	0x96	; 0x96 <init_i2c>
 1c2:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_i2c_reset>
 1c6:	8c e2       	ldi	r24, 0x2C	; 44
 1c8:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1d2:	86 e0       	ldi	r24, 0x06	; 6
 1d4:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1d8:	80 e8       	ldi	r24, 0x80	; 128
 1da:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_i2c_cmd>
 1de:	08 95       	ret

000001e0 <lcd_i2c_data>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	c8 2f       	mov	r28, r24
 1e6:	0e 94 54 00 	call	0xa8	; 0xa8 <start>
 1ea:	8e e4       	ldi	r24, 0x4E	; 78
 1ec:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1f0:	dc 2f       	mov	r29, r28
 1f2:	d0 7f       	andi	r29, 0xF0	; 240
 1f4:	8d 2f       	mov	r24, r29
 1f6:	8d 60       	ori	r24, 0x0D	; 13
 1f8:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 1fc:	8d 2f       	mov	r24, r29
 1fe:	89 60       	ori	r24, 0x09	; 9
 200:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 204:	20 e1       	ldi	r18, 0x10	; 16
 206:	c2 9f       	mul	r28, r18
 208:	e0 01       	movw	r28, r0
 20a:	11 24       	eor	r1, r1
 20c:	8c 2f       	mov	r24, r28
 20e:	8d 60       	ori	r24, 0x0D	; 13
 210:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 214:	8c 2f       	mov	r24, r28
 216:	89 60       	ori	r24, 0x09	; 9
 218:	0e 94 66 00 	call	0xcc	; 0xcc <write_i2c>
 21c:	0e 94 5c 00 	call	0xb8	; 0xb8 <stop>
 220:	8f ed       	ldi	r24, 0xDF	; 223
 222:	93 e9       	ldi	r25, 0x93	; 147
 224:	24 e0       	ldi	r18, 0x04	; 4
 226:	81 50       	subi	r24, 0x01	; 1
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	20 40       	sbci	r18, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <lcd_i2c_data+0x46>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <lcd_i2c_data+0x50>
 230:	00 00       	nop
 232:	8f ed       	ldi	r24, 0xDF	; 223
 234:	93 e9       	ldi	r25, 0x93	; 147
 236:	24 e0       	ldi	r18, 0x04	; 4
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	20 40       	sbci	r18, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <lcd_i2c_data+0x58>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_i2c_data+0x62>
 242:	00 00       	nop
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <lcd_i2c_write_string>:
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	8c 01       	movw	r16, r24
 254:	c0 e0       	ldi	r28, 0x00	; 0
 256:	d0 e0       	ldi	r29, 0x00	; 0
 258:	03 c0       	rjmp	.+6      	; 0x260 <lcd_i2c_write_string+0x16>
 25a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_i2c_data>
 25e:	21 96       	adiw	r28, 0x01	; 1
 260:	f8 01       	movw	r30, r16
 262:	ec 0f       	add	r30, r28
 264:	fd 1f       	adc	r31, r29
 266:	80 81       	ld	r24, Z
 268:	81 11       	cpse	r24, r1
 26a:	f7 cf       	rjmp	.-18     	; 0x25a <lcd_i2c_write_string+0x10>
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	0f 91       	pop	r16
 274:	08 95       	ret

00000276 <LCD_Command>:
void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port= cmnd;
 276:	85 b9       	out	0x05, r24	; 5
	LCD_Command_Port &=~(1<<RS);
 278:	88 b1       	in	r24, 0x08	; 8
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	88 b9       	out	0x08, r24	; 8
	LCD_Command_Port &=~(1<<RW);
 27e:	88 b1       	in	r24, 0x08	; 8
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	88 b9       	out	0x08, r24	; 8
	LCD_Command_Port |= (1<<EN);
 284:	88 b1       	in	r24, 0x08	; 8
 286:	84 60       	ori	r24, 0x04	; 4
 288:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &=~(1<<EN);
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	8b 7f       	andi	r24, 0xFB	; 251
 290:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	83 ef       	ldi	r24, 0xF3	; 243
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <LCD_Command+0x20>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <LCD_Command+0x26>
 29c:	00 00       	nop
 29e:	08 95       	ret

000002a0 <lcd_char>:
	_delay_ms(2);
	
}
void lcd_char(unsigned char char_data)
{
	LCD_Data_Port=char_data;
 2a0:	85 b9       	out	0x05, r24	; 5
	LCD_Command_Port |=(1<<RS);
 2a2:	88 b1       	in	r24, 0x08	; 8
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	88 b9       	out	0x08, r24	; 8
	LCD_Command_Port &= ~(1<<RW);
 2a8:	88 b1       	in	r24, 0x08	; 8
 2aa:	8d 7f       	andi	r24, 0xFD	; 253
 2ac:	88 b9       	out	0x08, r24	; 8
	LCD_Command_Port |= (1<<EN);
 2ae:	88 b1       	in	r24, 0x08	; 8
 2b0:	84 60       	ori	r24, 0x04	; 4
 2b2:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	00 00       	nop
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 2b6:	88 b1       	in	r24, 0x08	; 8
 2b8:	8b 7f       	andi	r24, 0xFB	; 251
 2ba:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	83 ef       	ldi	r24, 0xF3	; 243
 2be:	91 e0       	ldi	r25, 0x01	; 1
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <lcd_char+0x20>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <lcd_char+0x26>
 2c6:	00 00       	nop
 2c8:	08 95       	ret

000002ca <LCD_custom_char>:
	_delay_ms(2);
}
void LCD_custom_char(unsigned char loc,unsigned char *msg)
{
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
	unsigned char i;
	if(loc<8)
 2d0:	88 30       	cpi	r24, 0x08	; 8
 2d2:	98 f4       	brcc	.+38     	; 0x2fa <LCD_custom_char+0x30>
 2d4:	8b 01       	movw	r16, r22
	{
		LCD_Command (0X40 + (loc*8));
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	08 96       	adiw	r24, 0x08	; 8
 2da:	88 0f       	add	r24, r24
 2dc:	88 0f       	add	r24, r24
 2de:	88 0f       	add	r24, r24
 2e0:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_Command>
		for (i=0;i<8;i++)
 2e4:	c0 e0       	ldi	r28, 0x00	; 0
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <LCD_custom_char+0x2c>
		lcd_char(msg[i]);
 2e8:	f8 01       	movw	r30, r16
 2ea:	ec 0f       	add	r30, r28
 2ec:	f1 1d       	adc	r31, r1
 2ee:	80 81       	ld	r24, Z
 2f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_char>
{
	unsigned char i;
	if(loc<8)
	{
		LCD_Command (0X40 + (loc*8));
		for (i=0;i<8;i++)
 2f4:	cf 5f       	subi	r28, 0xFF	; 255
 2f6:	c8 30       	cpi	r28, 0x08	; 8
 2f8:	b8 f3       	brcs	.-18     	; 0x2e8 <LCD_custom_char+0x1e>
		lcd_char(msg[i]);
	}
	
}
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <main>:
#include "leds.h"
#include "i2c.h"
#include "lcd_i2c.h"

int main(void)
{
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	c0 54       	subi	r28, 0x40	; 64
 30c:	d1 09       	sbc	r29, r1
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	f8 94       	cli
 312:	de bf       	out	0x3e, r29	; 62
 314:	0f be       	out	0x3f, r0	; 63
 316:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	char i;
	
	unsigned char Character1[8] = {0x0D,0x0D,0x05,0x1F,0x1A,0x1E,0x0A,0x11};  /* Custom char set for alphanumeric LCD Module */
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	e0 e0       	ldi	r30, 0x00	; 0
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	de 01       	movw	r26, r28
 320:	11 96       	adiw	r26, 0x01	; 1
 322:	01 90       	ld	r0, Z+
 324:	0d 92       	st	X+, r0
 326:	8a 95       	dec	r24
 328:	e1 f7       	brne	.-8      	; 0x322 <main+0x20>
	unsigned char Character2[8] = { 0x04, 0x1F, 0x11, 0x11, 0x1F, 0x1F, 0x1F, 0x1F };
 32a:	88 e0       	ldi	r24, 0x08	; 8
 32c:	e8 e0       	ldi	r30, 0x08	; 8
 32e:	f1 e0       	ldi	r31, 0x01	; 1
 330:	de 01       	movw	r26, r28
 332:	19 96       	adiw	r26, 0x09	; 9
 334:	01 90       	ld	r0, Z+
 336:	0d 92       	st	X+, r0
 338:	8a 95       	dec	r24
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x32>
	unsigned char Character3[8] = { 0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x00, 0x04, 0x00 };
 33c:	88 e0       	ldi	r24, 0x08	; 8
 33e:	e0 e1       	ldi	r30, 0x10	; 16
 340:	f1 e0       	ldi	r31, 0x01	; 1
 342:	de 01       	movw	r26, r28
 344:	51 96       	adiw	r26, 0x11	; 17
 346:	01 90       	ld	r0, Z+
 348:	0d 92       	st	X+, r0
 34a:	8a 95       	dec	r24
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x44>
	unsigned char Character4[8] = { 0x01, 0x03, 0x07, 0x1F, 0x1F, 0x07, 0x03, 0x01 };
 34e:	88 e0       	ldi	r24, 0x08	; 8
 350:	e8 e1       	ldi	r30, 0x18	; 24
 352:	f1 e0       	ldi	r31, 0x01	; 1
 354:	de 01       	movw	r26, r28
 356:	59 96       	adiw	r26, 0x19	; 25
 358:	01 90       	ld	r0, Z+
 35a:	0d 92       	st	X+, r0
 35c:	8a 95       	dec	r24
 35e:	e1 f7       	brne	.-8      	; 0x358 <main+0x56>
	unsigned char Character5[8] = { 0x01, 0x03, 0x05, 0x09, 0x09, 0x0B, 0x1B, 0x18 };
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	e0 e2       	ldi	r30, 0x20	; 32
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	de 01       	movw	r26, r28
 368:	91 96       	adiw	r26, 0x21	; 33
 36a:	01 90       	ld	r0, Z+
 36c:	0d 92       	st	X+, r0
 36e:	8a 95       	dec	r24
 370:	e1 f7       	brne	.-8      	; 0x36a <main+0x68>
	unsigned char Character6[8] = { 0x0A, 0x0A, 0x1F, 0x11, 0x11, 0x0E, 0x04, 0x04 };
 372:	88 e0       	ldi	r24, 0x08	; 8
 374:	e8 e2       	ldi	r30, 0x28	; 40
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	de 01       	movw	r26, r28
 37a:	99 96       	adiw	r26, 0x29	; 41
 37c:	01 90       	ld	r0, Z+
 37e:	0d 92       	st	X+, r0
 380:	8a 95       	dec	r24
 382:	e1 f7       	brne	.-8      	; 0x37c <main+0x7a>
	unsigned char Character7[8] = { 0x00, 0x00, 0x0A, 0x00, 0x04, 0x11, 0x0E, 0x00 };
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	e0 e3       	ldi	r30, 0x30	; 48
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	de 01       	movw	r26, r28
 38c:	d1 96       	adiw	r26, 0x31	; 49
 38e:	01 90       	ld	r0, Z+
 390:	0d 92       	st	X+, r0
 392:	8a 95       	dec	r24
 394:	e1 f7       	brne	.-8      	; 0x38e <main+0x8c>
	unsigned char Character8[8] = { 0x00, 0x0A, 0x1F, 0x1F, 0x0E, 0x04, 0x00, 0x00 };
 396:	88 e0       	ldi	r24, 0x08	; 8
 398:	e8 e3       	ldi	r30, 0x38	; 56
 39a:	f1 e0       	ldi	r31, 0x01	; 1
 39c:	de 01       	movw	r26, r28
 39e:	d9 96       	adiw	r26, 0x39	; 57
 3a0:	01 90       	ld	r0, Z+
 3a2:	0d 92       	st	X+, r0
 3a4:	8a 95       	dec	r24
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0x9e>

	lcd_i2c_init();
 3a8:	0e 94 df 00 	call	0x1be	; 0x1be <lcd_i2c_init>
	
	
	LCD_custom_char(0, Character1);  /* Build Character1 at position 0 */
 3ac:	be 01       	movw	r22, r28
 3ae:	6f 5f       	subi	r22, 0xFF	; 255
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_custom_char>
	LCD_custom_char(1, Character2);  /* Build Character2 at position 1 */
 3ba:	be 01       	movw	r22, r28
 3bc:	67 5f       	subi	r22, 0xF7	; 247
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_custom_char>
	LCD_custom_char(2, Character3);  /* Build Character3 at position 2 */
 3c8:	be 01       	movw	r22, r28
 3ca:	6f 5e       	subi	r22, 0xEF	; 239
 3cc:	7f 4f       	sbci	r23, 0xFF	; 255
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_custom_char>
	LCD_custom_char(3, Character4);  /* Build Character4 at position 3 */
 3d6:	be 01       	movw	r22, r28
 3d8:	67 5e       	subi	r22, 0xE7	; 231
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	83 e0       	ldi	r24, 0x03	; 3
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_custom_char>
	LCD_custom_char(4, Character5);  /* Build Character5 at position 4 */
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5d       	subi	r22, 0xDF	; 223
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	84 e0       	ldi	r24, 0x04	; 4
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_custom_char>
	LCD_custom_char(5, Character6);  /* Build Character6 at position 5 */
 3f2:	be 01       	movw	r22, r28
 3f4:	67 5d       	subi	r22, 0xD7	; 215
 3f6:	7f 4f       	sbci	r23, 0xFF	; 255
 3f8:	85 e0       	ldi	r24, 0x05	; 5
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_custom_char>
	LCD_custom_char(6, Character7);  /* Build Character6 at position 6 */
 400:	be 01       	movw	r22, r28
 402:	6f 5c       	subi	r22, 0xCF	; 207
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	86 e0       	ldi	r24, 0x06	; 6
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_custom_char>
	LCD_custom_char(7, Character8);  /* Build Character6 at position 7 */
 40e:	be 01       	movw	r22, r28
 410:	67 5c       	subi	r22, 0xC7	; 199
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	87 e0       	ldi	r24, 0x07	; 7
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 65 01 	call	0x2ca	; 0x2ca <LCD_custom_char>

	LCD_Command(0x80);		/*cursor at home position */
 41c:	80 e8       	ldi	r24, 0x80	; 128
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_Command>
	lcd_i2c_write_string("Custom char LCD");
 424:	80 e4       	ldi	r24, 0x40	; 64
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_i2c_write_string>
	LCD_Command(0xc0);
 42c:	80 ec       	ldi	r24, 0xC0	; 192
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 3b 01 	call	0x276	; 0x276 <LCD_Command>
	
	for(i=0;i<8;i++)		/* function will send data 1 to 8 to lcd */
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	09 c0       	rjmp	.+18     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
	{
		lcd_char(i);		/* char at 'i'th position will display on lcd */
 438:	81 2f       	mov	r24, r17
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_char>
		lcd_char(' ');		/* space between each custom char. */
 440:	80 e2       	ldi	r24, 0x20	; 32
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_char>

	LCD_Command(0x80);		/*cursor at home position */
	lcd_i2c_write_string("Custom char LCD");
	LCD_Command(0xc0);
	
	for(i=0;i<8;i++)		/* function will send data 1 to 8 to lcd */
 448:	1f 5f       	subi	r17, 0xFF	; 255
 44a:	18 30       	cpi	r17, 0x08	; 8
 44c:	a8 f3       	brcs	.-22     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>

00000450 <_exit>:
 450:	f8 94       	cli

00000452 <__stop_program>:
 452:	ff cf       	rjmp	.-2      	; 0x452 <__stop_program>
